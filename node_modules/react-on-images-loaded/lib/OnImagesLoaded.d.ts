import React, { Component } from 'react';
import PropTypes from 'prop-types';
export declare type Props = {
    onLoaded: () => void;
    onTimeout?: () => void;
    timeout?: number;
    delay?: number;
    children: React.ReactElement | React.ReactElement[];
    placeholder?: React.ReactElement;
    onWillMount?: () => void;
    onDidMount?: () => void;
    classNameOnLoaded?: string;
    classNameOnMount?: string;
    className?: string;
};
declare type state = {
    loaded: boolean;
    loadCounter: number;
    imageCount: number;
    timedOut: boolean;
};
export default class OnImagesLoaded extends Component<Props, state> {
    static propTypes: {
        onTimeout: PropTypes.Requireable<(...args: any[]) => any>;
        onLoaded: PropTypes.Validator<(...args: any[]) => any>;
        delay: PropTypes.Requireable<number>;
        onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        placeholder: PropTypes.Requireable<PropTypes.ReactElementLike>;
        onDidMount: PropTypes.Requireable<(...args: any[]) => any>;
        onWillMount: PropTypes.Requireable<(...args: any[]) => any>;
        classNameOnLoaded: PropTypes.Requireable<string>;
        classNameOnMount: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
    };
    private _delay;
    private _timeout;
    private mounted;
    private _imgs;
    private imageLoad;
    private invokedCount;
    constructor(props: Props);
    private timingSetup;
    componentWillUnmount(): void;
    private _onUpdate;
    componentDidMount(): void;
    private _addImageListeners;
    private _removeImageListeners;
    private _setOnTimeoutEvent;
    private _runTimeout;
    private _onLoad;
    private get _fullyLoaded();
    private get _timedOut();
    private get _definedClassName();
    private _runOnLoadFunction;
    private _depreciatedClassNameHandler;
    render(): JSX.Element;
}
export {};
